// Copyright (c) 2009 Shardul Deo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Author: Shardul Deo
//
// Protobufs needed for socket rpcs.

package protobuf.socketrpc;

option java_package = "com.googlecode.protobuf.socketrpc";
option java_outer_classname = "SocketRpcProtos";

message Request {

  // RPC service full name
  required string service_name = 1;
  
  // RPC method name
  required string method_name = 2;
  
  // RPC request proto
  required bytes request_proto = 3;
  
  repeated uint32 allowed_error_codes = 4;
}

message Response {

  // RPC response proto
  optional bytes response_proto = 1;
  
  // Was callback invoked
  optional bool callback = 2 [default = false];
  
  // Error Reason
  optional ErrorReason error_code = 3 [default = NO_ERROR];

  optional uint32 application_error_code = 4;

  optional string error_message = 5;

}

// Possible error reasons
// The server-side errors are returned in the response from the server.
// The client-side errors are returned by the client-side code when it doesn't 
// have a response from the server.
enum ErrorReason {

  // No Error
  NO_ERROR = 0;

  // Server-side errors
  BAD_REQUEST_DATA = 1; // Server received bad request data
  BAD_REQUEST_PROTO = 2; // Server received bad request proto
  SERVICE_NOT_FOUND = 3; // Service not found on server
  METHOD_NOT_FOUND = 4; // Method not found on server
  RPC_ERROR = 5; // Rpc threw exception on server
  RPC_FAILED = 6; // Rpc failed on server
  
  // Client-side errors (these are returned by the client-side code)
  INVALID_REQUEST_PROTO = 7; // Rpc was called with invalid request proto
  BAD_RESPONSE_PROTO = 8; // Server returned a bad response proto
  UNKNOWN_HOST = 9; // Could not find supplied host
  IO_ERROR = 10; // I/O error while communicating with server
}
